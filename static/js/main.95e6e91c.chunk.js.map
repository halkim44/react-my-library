{"version":3,"sources":["components/table-row.js","components/BookTable.js","data/storage.js","components/modal.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","props","book","react_default","a","createElement","title","author","pages","className","onClick","readToggler","index","read","removeBook","BookTable","_this","this","rows","books","forEach","i","push","table_row","toggleReadStatus","id","React","Component","userBooks","updateLS","localStorage","setItem","JSON","stringify","storage","window","x","removeItem","e","DOMException","code","name","length","storageAvailable","parse","getItem","Modal","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","show","checkFormValidity","submitBtn","document","getElementById","forms","checkValidity","setAttribute","removeAttribute","self","closeModal","setState","reset","Book","console","log","class","type","required","onInput","placeholder","value","for","checked","elements","callback","App","components_BookTable","splice","components_modal","bookObj","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95e6e91c.chunk.js","sourcesContent":["import React from 'react';\n\nconst TableRow = (props) => {\n\t\t//props: index, bookObject, readToggler,removeBook\n\t\t//create the table row jsx\n\t\t// attach remove book button\n\t\tlet book = props.book;\n\treturn (\n\t\t<tr>\n\t\t\t<td> {book.title} </td>\n\t\t\t<td> {book.author} </td>\n\t\t\t<td> {book.pages} </td>\n\t\t\t<td> <button className=\"not-yet\" onClick={function() {props.readToggler(props.index)}}> {book.read? \"read\" : \"not yet\"} </button> </td>\n\t\t\t<td> <button className=\"remove-book btn\" onClick={props.removeBook}>remove</button> </td>\n\t\t</tr>\n\t)\n}\n\nexport default TableRow\n","import React from 'react';\nimport './bookTable.css';\nimport TableRow from './table-row';\n\n//import table-row\n\nclass BookTable extends React.Component {\n\n    render() {\n      let rows = [];\n      this.props.books.forEach((book, i) => {\n        rows.push(\n\t\t\t\t\t<TableRow\n\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\tbook ={book}\n           \treadToggler = {this.props.toggleReadStatus}\n            removeBook = {this.props.removeBook}\n\t\t\t\t\t/>)\n                //pass index n bookObj to row push row created from tableRow\n            })\n        return (\n\t\t\t\t<table id=\"table-of-books\">\n\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t<col className=\"title-col\"></col>\n\t\t\t\t\t\t<col className=\"author-col\"></col>\n\t\t\t\t\t</colgroup>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th> title </th>\n\t\t\t\t\t\t\t<th> author </th>\n\t\t\t\t\t\t\t<th> pages </th>\n\t\t\t\t\t\t\t<th> read </th>\n\t\t\t\t\t\t\t<th> </th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody> {rows} </tbody>\n\t\t\t\t</table>\n\t\t\t)\n    }\n}\n\nexport default BookTable\n","let userBooks = [{\n        title: \"Colorless Tsukuru Tazaki and His Years of Pilgrimage\",\n        author: \"Haruki Murakami\",\n        pages: \"370\",\n        read: false\n    },\n    {\n        title: \"The Lord of the Rings\",\n        author: \"J.R.R Tolkien\",\n        pages: \"1323\",\n        read: false\n    }\n];\n\nif (storageAvailable()) {\n    // replace data template with stored useData\n    userBooks = JSON.parse(localStorage.getItem('user-books')) || userBooks;\n}\n\nfunction storageAvailable() {\n    try {\n        var storage = window['localStorage'],\n            x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (e) {\n        return e instanceof DOMException && (\n                // everything except Firefox\n                e.code === 22 ||\n                // Firefox\n                e.code === 1014 ||\n                // test name field too, because code might not be present\n                // everything except Firefox\n                e.name === 'QuotaExceededError' ||\n                // Firefoxw\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            storage.length !== 0;\n    }\n}\n\nexport function updateLS() {\n    localStorage.setItem('user-books', JSON.stringify(userBooks));\n}\n\nexport default userBooks\n","import React from 'react';\nimport './modal.css';\n\nclass Modal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = ({\n            show: false\n        })\n    }\n\n    componentDidMount() {\n        this.checkFormValidity();\n    }\n    checkFormValidity(){\n        let submitBtn = document.getElementById('submit-button');\n        for (let i = 0; i < document.forms[0].length; i++) {\n          if (!document.forms[0][i].checkValidity()) {\n            submitBtn.setAttribute(\"disabled\", \"\");\n            break;\n          }\n          submitBtn.removeAttribute(\"disabled\");\n        }\n    }\n    render() {\n        let self = this;\n        function openModal() {\n            console.log('called');\n            self.setState({\n                show: true\n            })\n        }\n        function closeModal() {\n            self.setState({\n                show: false\n            })\n            document.forms[0].reset();\n        }\n        class Book {\n            constructor(title, author, pages, read) {\n                this.title = title;\n                this.author = author;\n                this.pages = pages;\n                this.read = read;\n            }\n        }\n\n        function registerNewBook() {\n            let title = document.forms[0][0].value;\n            let author = document.forms[0][1].value;\n            let pages = document.forms[0][2].value;\n            let read = document.forms[0].elements['read'].value;\n            read = read === \"yes\" ? true : false;\n          \n            self.props.callback(new Book(title, author, pages, read));\n            closeModal();\n            self.checkFormValidity();\n        }\n        \n        return(\n            <div className=\"modal-container\">\n                <button className=\"show-form-btn\" onClick={openModal}>\n                    ADD BOOK\n                </button>\n                <div\n                    className={this.state.show? \"modal show\": \"modal hide\"}>\n                    <div className=\"back-drop\" onClick={closeModal}></div>\n                    <div className=\"modal-content\">\n                        <span class=\"close-button\" onClick={closeModal}>&times;</span>\n                        <form id=\"book-info\">\n                            <legend>Book's information</legend>\n                            <input type=\"text\" id=\"title\" name=\"book_name\" required={true} onInput={this.checkFormValidity} placeholder=\"Title *\"/>\n                            <input type=\"text\" id=\"author\" name=\"book_author\" required={true} onInput={this.checkFormValidity} placeholder=\"Author *\"/>\n                            <input type=\"number\" id=\"pages\" name=\"book_pages\" required={true} onInput={this.checkFormValidity} /><br />\n\n                            <fieldset>\n                                <legend>have you read it?</legend>\n                                <p>\n                                    <input type=\"radio\" name=\"read\" id=\"read_yes\" value=\"yes\" />\n                                    <label for=\"read_yes\">Yes</label>\n                                </p>\n                                <p>\n                                    <input type=\"radio\" name=\"read\" id=\"read_no\" value=\"no\" checked={true} />\n                                    <label for=\"read_no\">No</label>\n                                </p>\n                            </fieldset>\n                            <button id=\"submit-button\" type=\"button\" onClick={registerNewBook}>NEW BOOK</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    //form validation function\n    // create a book object from book class\n\n    // pass new book created from Book class to addNewBook\n}\n\nexport default Modal;\n","import React from 'react';\nimport BookTable from './components/BookTable'\nimport './App.css';\nimport userBooks , {updateLS} from './data/storage';\nimport Modal from './components/modal';\n\nclass App extends React.Component {\n\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      books: userBooks\n    }\n  }\nrender() {\n  let self = this;\n  function removeBook(index) {\n    userBooks.splice(index, 1);\n    updateLS();\n\n    self.setState({\n      books: userBooks\n    })\n  }\n  function addNewBook(bookObj) {\n    userBooks.push(bookObj);\n    updateLS();\n    self.setState({\n      books: userBooks\n    });\n  }\n  function toggleReadStatus(index) {\n    userBooks[index].read = !userBooks[index].read;\n    updateLS();\n    self.setState({\n      books: userBooks\n    });\n  }\n  return (\n    <div className=\"container\">\n      <section className=\"header\">\n        <h1>D I R T</h1>\n        <p> Did I Read That</p>\n      </section>\n\n      <section id=\"table-section\">\n        <BookTable\n          books={ this.state.books }\n          removeBook={removeBook}\n          toggleReadStatus={toggleReadStatus} />\n      </section>\n\n      <section id=\"add-book-section\">\n        <Modal callback={addNewBook}/>\n      </section>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}